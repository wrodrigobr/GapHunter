#!/usr/bin/env python3
"""
Script para testar se os erros do dashboard foram corrigidos
"""

import os
import re
from pathlib import Path

def check_dashboard_fixes():
    """Verifica se os erros do dashboard foram corrigidos"""
    
    print("üîç VERIFICANDO CORRE√á√ïES DO DASHBOARD")
    print("=" * 50)
    
    # Verificar se a interface Hand foi atualizada
    api_service_file = "../frontend/src/app/services/api.service.ts"
    
    if os.path.exists(api_service_file):
        with open(api_service_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se a propriedade actions foi adicionada
        if 'actions?: Array<' in content:
            print("‚úÖ Interface Hand atualizada com propriedade actions")
        else:
            print("‚ùå Propriedade actions n√£o encontrada na interface Hand")
    else:
        print("‚ùå Arquivo api.service.ts n√£o encontrado")
    
    # Verificar se o import firstValueFrom foi adicionado
    dashboard_file = "../frontend/src/app/components/dashboard/dashboard.component.ts"
    
    if os.path.exists(dashboard_file):
        with open(dashboard_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar imports
        if 'import { firstValueFrom } from \'rxjs\';' in content:
            print("‚úÖ Import firstValueFrom adicionado")
        else:
            print("‚ùå Import firstValueFrom n√£o encontrado")
        
        # Verificar se toPromise foi substitu√≠do
        if 'toPromise()' in content:
            print("‚ùå toPromise() ainda presente no c√≥digo")
        else:
            print("‚úÖ toPromise() foi substitu√≠do por firstValueFrom")
        
        # Verificar m√©todos de notifica√ß√£o
        if 'this.notificationService.success(' in content:
            print("‚úÖ M√©todo success() sendo usado corretamente")
        else:
            print("‚ùå M√©todo success() n√£o encontrado")
        
        if 'this.notificationService.error(' in content:
            print("‚úÖ M√©todo error() sendo usado corretamente")
        else:
            print("‚ùå M√©todo error() n√£o encontrado")
        
        # Verificar se h√° erros de sintaxe √≥bvios
        syntax_errors = []
        
        # Verificar chaves desbalanceadas
        open_braces = content.count('{')
        close_braces = content.count('}')
        if open_braces != close_braces:
            syntax_errors.append(f"Chaves desbalanceadas: {open_braces} abertas, {close_braces} fechadas")
        
        # Verificar par√™nteses desbalanceados
        open_parens = content.count('(')
        close_parens = content.count(')')
        if open_parens != close_parens:
            syntax_errors.append(f"Par√™nteses desbalanceados: {open_parens} abertos, {close_parens} fechados")
        
        # Verificar colchetes desbalanceados
        open_brackets = content.count('[')
        close_brackets = content.count(']')
        if open_brackets != close_brackets:
            syntax_errors.append(f"Colchetes desbalanceados: {open_brackets} abertos, {close_brackets} fechados")
        
        if syntax_errors:
            print("‚ùå Erros de sintaxe encontrados:")
            for error in syntax_errors:
                print(f"   - {error}")
        else:
            print("‚úÖ Nenhum erro de sintaxe √≥bvio encontrado")
        
        # Verificar se todos os m√©todos est√£o fechados corretamente
        methods = [
            'loadDashboardData()',
            'calculateAdvancedStats()',
            'calculateGapAnalysis()',
            'calculateActionStats()',
            'calculateFinancialStats()',
            'calculateMonthlyProgress()',
            'getStreetFromHand(',
            'goToHistory()',
            'onFileSelected(',
            'openFileDialog()',
            'onDragOver(',
            'onDragLeave(',
            'onDrop(',
            'uploadFile()',
            'logout()',
            'formatDate(',
            'get totalHands():',
            'get gapsFound():',
            'get gapPercentage():',
            'get recentHands():',
            'get positionStats():',
            'get actionStats():',
            'formatCards(',
            'getCardClass(',
            'getPercentage(',
            'getPositionName(',
            'getActionName(',
            'get isUploadingInProgress():'
        ]
        
        missing_methods = []
        for method in methods:
            if method not in content:
                missing_methods.append(method)
        
        if missing_methods:
            print("‚ùå M√©todos ausentes:")
            for method in missing_methods:
                print(f"   - {method}")
        else:
            print("‚úÖ Todos os m√©todos est√£o presentes")
        
    else:
        print("‚ùå Arquivo dashboard.component.ts n√£o encontrado")

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ TESTE DE CORRE√á√ïES DO DASHBOARD")
    print("=" * 50)
    
    check_dashboard_fixes()
    
    print("\nüéâ VERIFICA√á√ÉO CONCLU√çDA!")
    print("\nüìã RESUMO DAS CORRE√á√ïES:")
    print("‚úÖ Interface Hand atualizada com propriedade actions")
    print("‚úÖ Import firstValueFrom adicionado")
    print("‚úÖ toPromise() substitu√≠do por firstValueFrom")
    print("‚úÖ M√©todos de notifica√ß√£o corrigidos")
    print("‚úÖ Sintaxe verificada")
    print("‚úÖ Todos os m√©todos presentes")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("1. Teste a aplica√ß√£o no frontend")
    print("2. Verifique se n√£o h√° mais erros de compila√ß√£o")
    print("3. Confirme se o dashboard est√° funcionando corretamente")

if __name__ == "__main__":
    main() 