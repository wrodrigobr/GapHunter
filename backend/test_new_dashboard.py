#!/usr/bin/env python3
"""
Script para testar o novo dashboard focado em estat√≠sticas
"""

import os
import sys
from pathlib import Path

def check_dashboard_files():
    """Verifica se os arquivos do novo dashboard foram criados corretamente"""
    
    print("üîç VERIFICANDO NOVO DASHBOARD")
    print("=" * 50)
    
    # Arquivos a serem verificados
    files_to_check = [
        "../frontend/src/app/components/dashboard/dashboard.component.html",
        "../frontend/src/app/components/dashboard/dashboard.component.ts",
        "../frontend/src/app/components/dashboard/dashboard.component.scss"
    ]
    
    for file_path in files_to_check:
        print(f"\nüìã Verificando {file_path}...")
        
        if not os.path.exists(file_path):
            print(f"  ‚ùå Arquivo n√£o encontrado: {file_path}")
            continue
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar elementos do novo dashboard
        new_elements = [
            "performance-overview",
            "kpi-section", 
            "gap-analysis",
            "improvement-areas",
            "monthly-progress",
            "history-button",
            "overview-card",
            "kpi-card",
            "gap-card",
            "improvement-card"
        ]
        
        found_elements = []
        for element in new_elements:
            if element in content:
                found_elements.append(element)
        
        if found_elements:
            print(f"  ‚úÖ Elementos encontrados: {len(found_elements)}/{len(new_elements)}")
            print(f"     {', '.join(found_elements)}")
        else:
            print(f"  ‚ùå Nenhum elemento do novo dashboard encontrado")

def check_removed_elements():
    """Verifica se elementos antigos foram removidos"""
    
    print("\nüîç VERIFICANDO REMO√á√ÉO DE ELEMENTOS ANTIGOS")
    print("=" * 50)
    
    html_file = "../frontend/src/app/components/dashboard/dashboard.component.html"
    
    if not os.path.exists(html_file):
        print(f"  ‚ùå Arquivo n√£o encontrado: {html_file}")
        return
    
    with open(html_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Elementos que devem ter sido removidos
    old_elements = [
        "recent-hands-table",
        "hands-table",
        "hand-row",
        "view-all-button",
        "stats-grid",
        "stat-card"
    ]
    
    found_old_elements = []
    for element in old_elements:
        if element in content:
            found_old_elements.append(element)
    
    if found_old_elements:
        print(f"  ‚ö†Ô∏è Elementos antigos ainda presentes: {found_old_elements}")
    else:
        print(f"  ‚úÖ Todos os elementos antigos foram removidos")

def check_new_indicators():
    """Verifica se os novos indicadores est√£o implementados"""
    
    print("\nüîç VERIFICANDO NOVOS INDICADORES")
    print("=" * 50)
    
    ts_file = "../frontend/src/app/components/dashboard/dashboard.component.ts"
    
    if not os.path.exists(ts_file):
        print(f"  ‚ùå Arquivo n√£o encontrado: {ts_file}")
        return
    
    with open(ts_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Novos indicadores implementados
    new_indicators = [
        "streetGaps",
        "positionGaps", 
        "totalActions",
        "averagePot",
        "premiumPositionAggression",
        "cbetRate",
        "threeBetRate",
        "handsThisMonth",
        "gapsThisMonth",
        "monthlyImprovement"
    ]
    
    found_indicators = []
    for indicator in new_indicators:
        if indicator in content:
            found_indicators.append(indicator)
    
    if found_indicators:
        print(f"  ‚úÖ Indicadores encontrados: {len(found_indicators)}/{len(new_indicators)}")
        print(f"     {', '.join(found_indicators)}")
    else:
        print(f"  ‚ùå Nenhum novo indicador encontrado")

def check_new_methods():
    """Verifica se os novos m√©todos est√£o implementados"""
    
    print("\nüîç VERIFICANDO NOVOS M√âTODOS")
    print("=" * 50)
    
    ts_file = "../frontend/src/app/components/dashboard/dashboard.component.ts"
    
    if not os.path.exists(ts_file):
        print(f"  ‚ùå Arquivo n√£o encontrado: {ts_file}")
        return
    
    with open(ts_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Novos m√©todos implementados
    new_methods = [
        "calculateAdvancedStats",
        "calculateGapAnalysis",
        "calculateActionStats", 
        "calculateFinancialStats",
        "calculateMonthlyProgress",
        "getStreetFromHand",
        "goToHistory"
    ]
    
    found_methods = []
    for method in new_methods:
        if method in content:
            found_methods.append(method)
    
    if found_methods:
        print(f"  ‚úÖ M√©todos encontrados: {len(found_methods)}/{len(new_methods)}")
        print(f"     {', '.join(found_methods)}")
    else:
        print(f"  ‚ùå Nenhum novo m√©todo encontrado")

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ TESTE DO NOVO DASHBOARD")
    print("=" * 50)
    
    check_dashboard_files()
    check_removed_elements()
    check_new_indicators()
    check_new_methods()
    
    print("\nüéâ VERIFICA√á√ÉO CONCLU√çDA!")
    print("\nüìã RESUMO DAS MUDAN√áAS:")
    print("‚úÖ Dashboard focado em estat√≠sticas importantes")
    print("‚úÖ Removida se√ß√£o de m√£os recentes")
    print("‚úÖ Adicionado bot√£o para acessar hist√≥rico")
    print("‚úÖ Novos indicadores de performance implementados")
    print("‚úÖ An√°lise de gaps por street e posi√ß√£o")
    print("‚úÖ √Åreas de melhoria identificadas")
    print("‚úÖ Progresso mensal com compara√ß√µes")
    print("‚úÖ Design moderno e responsivo")
    
    print("\nüéØ INDICADORES IMPLEMENTADOS:")
    print("‚Ä¢ Taxa de agress√£o em posi√ß√µes premium")
    print("‚Ä¢ Taxa de C-Bet (continuation bet)")
    print("‚Ä¢ Taxa de 3-Bet")
    print("‚Ä¢ Pot m√©dio por m√£o")
    print("‚Ä¢ Gaps por street (preflop, flop, turn, river)")
    print("‚Ä¢ Gaps por posi√ß√£o")
    print("‚Ä¢ Progresso mensal")
    print("‚Ä¢ Melhoria percentual m√™s a m√™s")

if __name__ == "__main__":
    main() 