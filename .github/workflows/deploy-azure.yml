name: Deploy GapHunter to Azure App Service

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: gaphunter-rg
  AZURE_LOCATION: westus2  # Alterado de eastus para westus2 (melhor disponibilidade)
  BACKEND_APP_NAME: gaphunter-backend
  FRONTEND_APP_NAME: gaphunter-frontend-static
  POSTGRES_SERVER_NAME: gaphunter-postgres
  DATABASE_NAME: gaphunter
  APP_SERVICE_PLAN: gaphunter-plan

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        # Verificar se Resource Group já existe e obter sua localização
        if az group show --name ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          EXISTING_LOCATION=$(az group show --name ${{ env.AZURE_RESOURCE_GROUP }} --query location --output tsv)
          echo "✅ Resource Group já existe em: $EXISTING_LOCATION"
          echo "AZURE_LOCATION=$EXISTING_LOCATION" >> $GITHUB_ENV
        else
          echo "📦 Criando novo Resource Group em: ${{ env.AZURE_LOCATION }}"
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}
        fi

    - name: Create PostgreSQL Server and Database
      run: |
        # Check if PostgreSQL Server exists
        if ! az postgres flexible-server show --name ${{ env.POSTGRES_SERVER_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          echo "Creating PostgreSQL Flexible Server..."
          az postgres flexible-server create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.POSTGRES_SERVER_NAME }} \
            --location $AZURE_LOCATION \
            --admin-user gaphunter \
            --admin-password "${{ secrets.DB_ADMIN_PASSWORD }}" \
            --sku-name Standard_B1ms \
            --tier Burstable \
            --storage-size 32 \
            --version 14 \
            --public-access 0.0.0.0
        fi
        
        # Check if database exists
        if ! az postgres flexible-server db show --database-name ${{ env.DATABASE_NAME }} --server-name ${{ env.POSTGRES_SERVER_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          echo "Creating database..."
          az postgres flexible-server db create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --server-name ${{ env.POSTGRES_SERVER_NAME }} \
            --database-name ${{ env.DATABASE_NAME }}
        fi

    - name: Create App Service Plan
      run: |
        if ! az appservice plan show --name ${{ env.APP_SERVICE_PLAN }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          echo "🎯 Tentando criar plano B1 Basic..."
          if az appservice plan create \
            --name ${{ env.APP_SERVICE_PLAN }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location $AZURE_LOCATION \
            --sku B1 \
            --is-linux 2>/dev/null; then
            echo "✅ Plano B1 Basic criado com sucesso!"
            echo "PLAN_SKU=B1" >> $GITHUB_ENV
          else
            echo "⚠️  B1 não disponível devido a quota. Usando F1 GRATUITO..."
            az appservice plan create \
              --name ${{ env.APP_SERVICE_PLAN }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location $AZURE_LOCATION \
              --sku F1 \
              --is-linux
            echo "PLAN_SKU=F1" >> $GITHUB_ENV
            echo "💡 F1 tem limitações: 60min/dia CPU, sem Always-On"
            echo "💡 Para produção, solicite aumento de quota para B1"
          fi
        fi

    - name: Create Backend App Service
      run: |
        if ! az webapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          az webapp create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan ${{ env.APP_SERVICE_PLAN }} \
            --name ${{ env.BACKEND_APP_NAME }} \
            --runtime "PYTHON|3.11"
        fi

    - name: Configure Backend App Settings
      run: |
        DATABASE_URL="postgresql://gaphunter:${{ secrets.DB_ADMIN_PASSWORD }}@${{ env.POSTGRES_SERVER_NAME }}.postgres.database.azure.com:5432/${{ env.DATABASE_NAME }}"
        
        # Configurações básicas
        az webapp config appsettings set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --settings \
          DATABASE_URL="$DATABASE_URL" \
          SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
          ENVIRONMENT="production" \
          SCM_DO_BUILD_DURING_DEPLOYMENT=true \
          ENABLE_ORYX_BUILD=true
        
        # Otimizações específicas para F1
        if [ "$PLAN_SKU" = "F1" ]; then
          echo "🔧 Aplicando otimizações para plano F1..."
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.BACKEND_APP_NAME }} \
            --settings \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITE_HTTPLOGGING_RETENTION_DAYS=1 \
            GUNICORN_WORKERS=1 \
            GUNICORN_TIMEOUT=120
        fi

    - name: Configure Backend Startup
      run: |
        az webapp config set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.BACKEND_APP_NAME }} \
          --startup-file "python startup.py"

    - name: Deploy Backend Code
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME }}
        package: './backend'

    - name: Create Static Web App (Frontend)
      run: |
        if ! az staticwebapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} &> /dev/null; then
          az staticwebapp create \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location $AZURE_LOCATION \
            --source "https://github.com/${{ github.repository }}" \
            --branch ${{ github.ref_name }} \
            --app-location "/frontend" \
            --output-location "dist" \
            --login-with-github
        fi

    - name: Get Application URLs
      id: app-urls
      run: |
        BACKEND_URL=$(az webapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "defaultHostName" --output tsv)
        FRONTEND_URL=$(az staticwebapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "defaultHostname" --output tsv)
        
        echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Wait for Backend to be Ready
      run: |
        echo "Aguardando backend ficar online..."
        if [ "$PLAN_SKU" = "F1" ]; then
          echo "⏱️  Plano F1 pode ter cold start mais lento..."
          sleep 180  # 3 minutos para F1
        else
          sleep 120  # 2 minutos para B1
        fi
        
        # Test backend health
        for i in {1..10}; do
          if curl -f "https://${{ steps.app-urls.outputs.backend-url }}/health" &> /dev/null; then
            echo "Backend está online!"
            break
          fi
          echo "Tentativa $i/10 - aguardando..."
          sleep 30
        done

    - name: Run Database Migrations
      run: |
        # Try to run migrations
        curl -X POST "https://${{ steps.app-urls.outputs.backend-url }}/admin/migrate" || echo "Migrations may need to be run manually"

    - name: Display Deployment Info
      run: |
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "🌐 Application URLs:"
        echo "Frontend: https://${{ steps.app-urls.outputs.frontend-url }}"
        echo "Backend:  https://${{ steps.app-urls.outputs.backend-url }}"
        echo "API Docs: https://${{ steps.app-urls.outputs.backend-url }}/docs"
        echo ""
        if [ "$PLAN_SKU" = "F1" ]; then
          echo "💰 Configuração GRATUITA aplicada:"
          echo "- App Service Plan: F1 (GRATUITO com limitações)"
          echo "- Azure Database for PostgreSQL: Burstable B1ms (~$12/month)"
          echo "- Static Web App: FREE"
          echo "- Total estimated cost: ~$12/month"
          echo ""
          echo "⚠️  LIMITAÇÕES DO PLANO F1:"
          echo "- 60 minutos/dia de CPU ativa"
          echo "- Sem Always-On (cold starts de ~10-30s)"
          echo "- 1GB RAM máximo"
          echo "- Ideal para MVP e testes"
          echo ""
          echo "💡 Para produção, solicite aumento de quota para B1:"
          echo "   Portal Azure > Help + Support > New Support Request"
          echo "   Tipo: Service and subscription limits (quotas)"
          echo "   Serviço: App Service > Basic VMs: 1"
        else
          echo "💰 Cost-optimized App Service configuration:"
          echo "- Azure Database for PostgreSQL: Burstable B1ms (~$12/month)"
          echo "- App Service Plan: B1 Basic (~$13/month)"
          echo "- Static Web App: FREE"
          echo "- Total estimated cost: ~$25/month"
        fi

